

Procedure 
	Syntax :     Create procedure preocedure_name[ (
	
	
	
Example   - -----------------------------------------------------------------------------------------------------------------
	
CASE 1: A Stored Procedure that Accept No Parameters
DELIMITER |
CREATE PROCEDURE sample_sp_no_param ()
BEGIN
UPDATE emp SET `first name`= 'ChangedHJK' where id = 1;
END
|
DELIMITER ;

 

Execute and Verify Commands
CALL sample_sp_no_param;
select * from emp;
	
	
	
	
	
	
	
Case study for stored procedure

CASE 1: A Stored Procedure that Accept No Parameters
CASE 2: A Stored Procedure that Accept Parameters (IN, OUT, INOUT)
CASE 3: A Stored Procedure that Accept Parameters, Return ResultSet


CASE 4: A Stored Function that Accept No Parameters
CASE 5: A Stored Function that Accept Parameters

--------------------------------------------------------------------------------------------------------------------------------

CASE 1: A Stored Procedure that Accept No Parameters
DELIMITER |
CREATE PROCEDURE sample_sp_no_param ()
BEGIN
UPDATE emp SET `first name`= 'ChangedHJK' where id = 1;
END
|
DELIMITER ;

 

Execute and Verify Commands
CALL sample_sp_no_param;
select * from emp;

 
--------------------------------------------------------------------------------------------------------------------------- 
 
 
 CASE 2: A Stored Procedure that Accept Parameters (IN, OUT, INOUT)
DELIMITER |
CREATE PROCEDURE sample_sp_with_params (IN empId INT UNSIGNED, OUT oldName VARCHAR(20), INOUT newName VARCHAR(20))
BEGIN
SELECT `first name` into oldName FROM emp where id = empId;
UPDATE emp SET `first name`= newName where id = empId;
END
|
DELIMITER ;

 

Execute and Verify Commands
set @inout='updatedHJK';
CALL sample_sp_with_params(1,@out,@inout);
select @out,@inout;
select * from emp;

----------------------------------------------------------------------------------------------------------------------------

CASE 3: A Stored Procedure that Accept Parameters, Return ResultSet

DELIMITER |
CREATE PROCEDURE sample_sp_with_params_resultset (IN empId INT UNSIGNED, OUT oldName VARCHAR(20), INOUT newName VARCHAR(20))
BEGIN
SELECT `first name` into oldName FROM emp where id = empId;
UPDATE emp SET `first name`= newName where id = empId;
select * from emp;
END
|
DELIMITER ;

Execute and Verify Commands
set @inout='updatedHJKS';
CALL sample_sp_with_params_resultset (1,@out,@inout);
You can verify the values of OUT and INOUT parameters as:
select @out,@inout;



--------------------------------------------------------------------------------------------------


CREATE PROCEDURE fact(IN x INT)
BEGIN
  DECLARE result INT;
  DECLARE i INT;
  SET result = 1;
  SET i = 1;
  WHILE i <= x DO
    SET result = result * i;
    SET i = i + 1;
  END WHILE;

  SELECT x AS Number, result as Factorial;

END;

CALL fact(1) //
CALL fact(2) //
CALL fact(4) //
CALL fact(0) //


--------------------------------------------------------------------------------------------------

DROP PROCEDURE IF EXISTS fact //
CREATE PROCEDURE fact(IN x INT)
BEGIN

  DECLARE result INT DEFAULT 1;  /* notice you can declare a variable*/
  DECLARE i INT DEFAULT 1;       /* and give it a value in one line */

  REPEAT
    SET result = result * i;
    SET i = i + 1;
  UNTIL i > x
  END REPEAT;

  SELECT x AS Number, result as Factorial;

END;
//

CALL fact(1) //
CALL fact(2) //
CALL fact(4) //
CALL fact(0) //


-----------------------------------------------------------------------------------------------------------
CREATE PROCEDURE FindStudent(IN id INT)
  SELECT StuID, CONCAT(FName, ' ', LName) AS 'Student Name'
  FROM Student
  WHERE StuID = id;






#CREATE TABLE Department(DepartmentID INT PRIMARY KEY,DepartmentName VARCHAR(30))

#CREATE cType DeptType AS TABLE(DeptId INT, DeptName VARCHAR(30));



---------------------------------------------------------------------------------------------------------------------------

In MySQL, a function is a stored program that you can pass parameters into and then return a value.

CREATE FUNCTION function_name [ (parameter datatype [, parameter datatype]) ]   
RETURNS return_datatype  
BEGIN  
Declaration_section  
Executable_section  
END; 

Parameter:
Function_name: name of the function
Parameter: number of parameter. It can be one or more than one.
return_datatype: return value datatype of the function
declaration_section: all variables are declared.
executable_section: code for the function is written here.


Label based SQL Function 


Example   -----------------

DELIMITER //

CREATE FUNCTION CalcIncome ( starting_value INT )
RETURNS INT
BEGIN
   DECLARE income INT;
   SET income = 0;

   label1: WHILE income <= 3000 DO
     SET income = income + starting_value;
   END WHILE label1;

   RETURN income;
END; //

DELIMITER ;
You could then reference your new function as follows:

SELECT CalcIncome (1000);


---------------------------------------------------------------------------------------
1. Deterministic functions :Deterministic functions always result in the same output every time they are called with a fixed set of input values and given the same condition of the database. 
For example, AVG() function always results the same result given the qualifications stated above.


2. Nondeterministic functions : Nondeterministic functions result in different output each time they are called with a fixed set of input values even if the database state that they access remains the same. 
For example, GETDATE() function, results the current date and time value, always a different value.


Non-deterministic means a value like Now() or Rand() determines results. Your query is deterministic.

-----------------------------------------------------------------------------------------------------------------------------------


Difference between Procedure and Function 

a. FUNCTION is always returns a value using the return statement. A  PROCEDURE may return one or more values through parameters or may not return at all.
b. Functions are normally used for computations where as procedures are normally used for executing business logic.
c. A Function returns 1 value only. Procedure can return multiple values (max 1024).
d. Stored procedure returns always integer value by default zero. Whereas function returns type could be scalar or table or table values
e. Stored procedure is precompiled execution plan where as functions are not.
f. A function can call directly by SQL statement like select func_name from dual while procedure cannot.
g. Stored procedure has the security and reduces the network traffic and also we can call stored procedure in any no. of applications at a time.
h. A Function can be used in the SQL Queries while a procedure cannot be used in SQL queries .that cause a major difference b/w function and procedures.





--------------------------------------------------------------------------------------------------------------------------------------------------

DROP TRIGGER
In MySQL Trigger can also be drop. When Trigger drops, then it is removed from the database.

Syntax
Drop Trigger[ IF EXISTS ] Trigger_name;  
Parameter:
Trigger_name: Name of the Trigger to be dropped

Example 1
drop Trigger student_update; 






CREATE TRIGGER 'student_delete' AFTER DELETE ON 'student' FOR EACH ROW DELETE FROM student2 WHERE student.id=student1.id;






In MySQL, AFTER/BEFORE DELETE trigger can also be created. AFTER/BEFORE DELETE trigger means trigger will invoke after/before the record is deleted.

Syntax
CREATE TRIGGER trigger_name  
    AFTER/BEFORE DELETE  
         ON table_name FOR EACH ROW  
         BEGIN  
        --variable declarations  
        --trigger code  
        END;  
Parameter:
trigger_name: name of the trigger to be created.

AFTER/BEFORE DELETE: It points the trigger after/before delete query is executed.

table_name: name of the table in which a trigger is created.

    
    
    
    
    









CREATE TABLE employees_audit (
    id INT AUTO_INCREMENT PRIMARY KEY,
    employeeNumber INT NOT NULL,
    lastname VARCHAR(50) NOT NULL,
    changedat DATETIME DEFAULT NULL,
    action VARCHAR(50) DEFAULT NULL
);


DELIMITER $$
CREATE TRIGGER before_employee_update 
    BEFORE UPDATE ON employees
    FOR EACH ROW 
BEGIN
    INSERT INTO employees_audit
    SET action = 'update',
     employeeNumber = OLD.employeeNumber,
        lastname = OLD.lastname,
        changedat = NOW(); 
END$$
DELIMITER ;








CREATE TABLE test1(a1 INT);
CREATE TABLE test2(a2 INT);
CREATE TABLE test3(a3 INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
CREATE TABLE test4(
  a4 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  b4 INT DEFAULT 0
);

delimiter |

CREATE TRIGGER testref BEFORE INSERT ON test1
  FOR EACH ROW
  BEGIN
    INSERT INTO test2 SET a2 = NEW.a1;
    DELETE FROM test3 WHERE a3 = NEW.a1;
    UPDATE test4 SET b4 = b4 + 1 WHERE a4 = NEW.a1;
  END;
|

delimiter ;

INSERT INTO test3 (a3) VALUES
  (NULL), (NULL), (NULL), (NULL), (NULL),
  (NULL), (NULL), (NULL), (NULL), (NULL);

INSERT INTO test4 (a4) VALUES
  (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);

    
    
    
    
    mysql> INSERT INTO test1 VALUES 
       (1), (3), (1), (7), (1), (8), (4), (4);
Query OK, 8 rows affected (0.01 sec)
Records: 8  Duplicates: 0  Warnings: 0

    
    
    

SET @sum=0;


insert into accounts values(1,10000.23);
insert into accounts values(2,20000);

select @sum;

CREATE TRIGGER trg_insert BEFORE INSERT on accounts
for EACH ROW
SET @sum=@sum+NEW.amount;




CREATE TABLE accounts(account_nun int,amount decimal(10,2));


-------------------------------------------------------------------------------------------------------------------------------------------------------

DROP TRIGGER
In MySQL Trigger can also be drop. When Trigger drops, then it is removed from the database.

Syntax
Drop Trigger[ IF EXISTS ] Trigger_name;  
Parameter:
Trigger_name: Name of the Trigger to be dropped

Example 1
drop Trigger student_update; 






CREATE TRIGGER 'student_delete' AFTER DELETE ON 'student' FOR EACH ROW DELETE FROM student2 WHERE student.id=student1.id;






In MySQL, AFTER/BEFORE DELETE trigger can also be created. AFTER/BEFORE DELETE trigger means trigger will invoke after/before the record is deleted.

Syntax
CREATE TRIGGER trigger_name  
    AFTER/BEFORE DELETE  
         ON table_name FOR EACH ROW  
         BEGIN  
        --variable declarations  
        --trigger code  
        END;  
Parameter:
trigger_name: name of the trigger to be created.

AFTER/BEFORE DELETE: It points the trigger after/before delete query is executed.

table_name: name of the table in which a trigger is created.


https://codebunk.com/b/6551100620471/



